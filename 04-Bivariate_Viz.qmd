---
title: "Effective and Bivariate Visualizations"
author: "Brianna Heggeseth"
logo: "images/mac.png"
format: 
  revealjs:
    theme: slides.scss
    multiplex: true
    transition: fade
    chalkboard: true
    auto-stretch: false
    scrollable: true
editor: visual
---

```{r}
#| include: false
#| label: 03_setup

knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(tufte)
library(tidyverse)
library(ggplot2)
library(ggmap)
library(fivethirtyeight)
library(babynames) 
library(readr)
```

## Learning Goals {.unnumbered}

-   Understand and apply the guiding principles of effective visualizations
-   Identify appropriate types of bivariate visualizations, depending on the type of variables (categorical, quantitative)
-   Create basic bivariate visualizations based on real data

## Benefits of Visualizations

-   Visualizations help us understand what we're working with:
    -   What are the scales of our variables?
    -   Are there any outliers, i.e. unusual cases?
    -   What are the patterns among our variables?
-   This understanding will inform our next steps: What method of analysis / model is appropriate?
-   Once our analysis is complete, visualizations are a powerful way to communicate our findings and tell a story.

## Analysis of Graphics {.unnumbered}

There is not one *right* way to visualize a data set.

Let's try some critical analysis on specific examples.

<br>

Identify the following:

1.  the story the graphic is aiming to communicate to the audience
2.  effective features of the graphic
3.  areas for improvement

## Analysis of Graphics {.unnumbered}

[![](images/badviz3.png){fig-alt="Source: http://viz.wtf/" fig-align="center" width="600"}](http://viz.wtf/)


## Analysis of Graphics {.unnumbered}

![](images/trilogies.gif){fig-alt="Source: N. Yau, *Visualize This*, 2011, p. 223-225." fig-align="center" width="600"}


## Bivariate Visualizations {.unnumbered}

In this activity we will analyze data from the 2016 presidential election.

We'll explore county-level election outcomes and demographics.


## Getting to know the dataset {.smaller}

Begin by loading the data from https://www.macalester.edu/\~ajohns24/data/electionDemographics16.csv and getting to know the data. 

## Getting to know the dataset {.unnumbered .smaller}

Loading in the Data

```{r}
library(tidyverse)
elect <- read_csv("https://www.macalester.edu/~ajohns24/data/electionDemographics16.csv")
```

## Getting to know the dataset {.smaller}

Check out the first rows of elect. What are the units of observation?

. . .

```{r}
head(elect)
```


## Getting to know the dataset {.smaller}

How much data do we have?    

. . .

```{r}
dim(elect)
```

## Getting to know the dataset {.smaller}

What are the names of the variables?     

. . .

```{r}
names(elect)
```

## Exercise: Explore County Winners  {.smaller}

The `winrep_2016` variable indicates whether or not the Republican (Trump) won the county in 2016, thus is *categorical*. 

Let's construct both numerical and visual summaries of Trump wins/losses. 

*Before you do, what do you anticipate?*

## Exercise: Explore County Winners  {.smaller}

Construct a table (a numerical summary) of the number of counties that Trump won/lost

. . .

```{r}
table(elect$winrep_2016)
```

## Exercise: Explore County Winners {.smaller}
Construct a bar chart (a visual summary) of this variable.

. . .

```{r}
#Attach a library needed for ggplots
library(ggplot2)

ggplot(data = elect, aes(x = winrep_2016)) + 
    geom_bar()
```
## Exercise: Explore Vote Percentages {.unnumbered .smaller}

The `perrep_2016` variable includes a bit more detail about Trump's support in each county.

a.  Since it's *quantitative* we need different tools to visually explore the variability in `perrep_2016`. To this end, construct & interpret both a histogram and density plot of `perrep_2016`. (Before you do, what do you anticipate?)

. . .

```{r}
#histogram
ggplot(elect, aes(x = perrep_2016)) + 
  geom_histogram(color="white")

#density plot
ggplot(elect, aes(x = perrep_2016)) + 
  geom_density()
```

## Exercise: Explore Vote Percentages {.unnumbered .smaller}

b.  Thus far, we have a good sense for how Trump's support varied from county to county. We don't yet have a good sense for *why*. 

What other variables (ie. county features) might explain some of the variability in Trump's support from county to county? Which of these variables do you think will be the best predictors of support? The worst?

```{r}
names(elect)
```


## Background on visualizing relationships {.unnumbered .smaller}

We've come up with a list of variables that might explain some of the variability in Trump's support from county to county. 

Thus we're interested in the relationship between:

-   [**response variable**]{style="color:red"}: the variable whose variability we would like to explain (Trump's percent of the vote)\
-   [**predictors**]{style="color:red"}: variables that might explain some of the variability in the response (percent white, per capita income, state color, etc)

## Visualizing relationships {.unnumbered .smaller}

Our goal is to construct visualizations that allow us to examine/identify the following features of the relationships among these variables:

-   relationship *trends*\
-   relationship *strength* (degree of variability from the trend)\
-   *outliers* in the relationship

## Visualizing relationships {.unnumbered .smaller}

Recall some **basic rules in constructing graphics:**

-   Each **quantitative variable** requires a new axis. (We'll discuss later what to do when we run out of axes!)\
-   Each **categorical variable** requires a new way to "group" the graphic (eg: using colors, shapes, separate facets, etc to capture the grouping)\
-   For visualizations in which **overlap** in glyphs or plots obscures the patterns, try faceting or transparency.


## Exercise: Mock-Ups {.unnumbered .smaller}

Consider a subset of the variables:

```{r}
#| echo: false
#| warning: false

suppressPackageStartupMessages(library(dplyr))

fd <- elect %>% 
    filter(region %in% c(8039,28003,40129,29119,13247,27027)) %>% 
    select(c(county, abb, perrep_2016, perrep_2012, winrep_2016, StateColor)) %>% 
    mutate(perrep_2016 = round(perrep_2016,2), perrep_2012 = round(perrep_2012,2))
knitr::kable(fd)
```

In groups, sketch on paper a mock-up of a visualization of the relationship between the given pair of variables (i.e., what type of chart is appropriate to demonstrate the relationship?):

a.  The relationship between `perrep_2016` (the response) and `perrep_2012` (the predictor).


b.  The relationship between `perrep_2016` (the response) and `StateColor` (the predictor). Think: how might we modify the below density plot of `perrep_2016` to distinguish between counties in red/purple/blue states?


```{r}
library(ggplot2)
```

```{r}
#| fig.width: 2
#| fig.height: 2
ggplot(elect, aes(x = perrep_2016)) + 
  geom_density()
```

c.  The relationship between Trump's county-levels wins/losses `winrep_2016` (the response) and `StateColor` (the predictor). Think: how might we modify the below bar plot of `winrep_2016` to distinguish between counties in red/purple/blue states?


```{r}
#| fig.width: 3
#| fig.height: 2
ggplot(elect, aes(x = winrep_2016)) + 
  geom_bar()
```

## Visualizing quantitative vs quantitative relationships {.unnumbered}

Let's start by exploring the relationship between Trump's 2016 support (`perrep_2016`) and Romney's 2012 support (`perrep_2012`), both quantitative variables.

## Exercise: Scatterplots and Glyphs {.unnumbered .smaller}

Both `perrep_2016` and `perrep_2012` are quantitative, thus require their own axes. 

Traditionally, the response variable (what we are trying to predict or explain) is placed on the y-axis. Once the axes are set up, each case is represented by a "glyph" at the coordinates defined by these axes.

a.  Make a scatterplot of `perrep_2016` vs `perrep_2012` with different glyphs: points or text.

. . .

```{r }
#just a graphics frame
ggplot(elect, aes(y=perrep_2016, x=perrep_2012))

#add a layer with "point" glyphs
ggplot(elect, aes(y=perrep_2016, x=perrep_2012)) + 
  geom_point()    

#add a layer with symbol glyphs
ggplot(elect, aes(y=perrep_2016, x=perrep_2012)) + 
  geom_point(shape=3)

#add a layer with "text" glyphs
ggplot(elect, aes(y=perrep_2016, x=perrep_2012)) + 
  geom_text(aes(label=abb))

```

b.  Summarize the relationship between the Republican candidates' support in 2016 and 2012. Be sure to comment on:\
    -   the strength of the relationship (weak/moderate/strong)\
    -   the direction of the relationship (positive/negative)\
    -   outliers (In what state do counties deviate from the national trend? Explain why this might be the case)


## Exercise: Capture the Trend with 'smooths' {.unnumbered .smaller}

The trend of the relationship between `perrep_2016` and `perrep_2012` is clearly positive and (mostly) linear. We can highlight this trend by adding a model "smooth" to the plot.

a.  Add a layer with a model smooth:

. . .

```{r}
ggplot(elect, aes(y=perrep_2016, x=perrep_2012)) + 
  geom_point() + 
  geom_smooth()
```

b.  Construct a new plot that contains the model smooth but does not include the individual cases (eg: point glyphs).

. . .

```{r}
ggplot(elect, aes(y=perrep_2016, x=perrep_2012)) + 
  geom_smooth()
```

c.  Notice that there are gray bands surrounding the blue model smooth line. What do these gray bars illustrate/capture and why are they widest at the "ends" of the model?

. . .

> Uncertainty; there are fewer data points at the "ends" so we are more uncertain about the model there.

d.  By default, `geom_smooth` adds a smooth, localized model line. To examine the "best" *linear model*, we can specify `method="lm"`:

. . .

```{r}
ggplot(elect, aes(y=perrep_2016, x=perrep_2012)) + 
  geom_point() + 
  geom_smooth(method="lm")
```

## Exercise: Modify the Scatterplots {.unnumbered .smaller}

As with univariate plots, we can change the aesthetics of scatterplots.

a.  Add appropriate axis labels to your scatterplot. Label the y-axis "Trump 2016 support (%)" and label the x-axis "Romney 2012 support (%)".\
b.  Change the color of the points.\
c.  Add some *transparency* to the points. NOTE: `alpha` can be between 0 (complete transparency) and 1 (no transparency).\
d.  Why is transparency useful in this particular graphic?

. . .

```{r}
ggplot(elect, aes(y=perrep_2016, x=perrep_2012)) + 
  geom_point(color = 'orange', alpha = 0.2) + 
  geom_smooth(method="lm") +
  labs(x = 'Romney 2012 support (%)', y = 'Trump 2016 support (%)') +
  theme_classic()
```

## Exercise: More Scatterplots {.unnumbered .smaller}

2012 results aren't the only possible predictor of 2016 results. Consider two more possibilities.

a.  Construct a scatterplot of `perrep_2016` and `median_rent`. Summarize the relationship between these two variables.


. . .

```{r}
ggplot(elect, aes(y=perrep_2016, x=median_rent)) + 
  geom_point(color = 'orange', alpha = 0.2) + 
  geom_smooth(method="lm") +
  labs(x = 'Median Rent ($)', y = 'Trump 2016 support (%)') +
  theme_classic()
```

b.  Construct a scatterplot of `perrep_2016` and `percent_white`. Summarize the relationship between these two variables.


```{r}
ggplot(elect, aes(y=perrep_2016, x=percent_white)) + 
  geom_point(color = 'orange', alpha = 0.2) + 
  geom_smooth(method="lm") +
  labs(x = 'White Percent (%)', y = 'Trump 2016 support (%)') +
  theme_classic()
```

c.  Among `perrep_2012`, `median_rent` and `percent_white`, which is the best predictor of `perrep_2016`? Why?


## Visualizing quantitative vs. categorical relationships {.unnumbered .smaller}

Consider a univariate histogram and density plot of `perrep_2016`:

```{r}
#| echo: false
#| warning: false
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(ggplot2))
g1 = ggplot(elect, aes(x=perrep_2016)) + geom_histogram(color="white")
g2 = ggplot(elect, aes(x=perrep_2016)) + geom_density(fill="white")
grid.arrange(g1,g2,ncol=2)
```

To visualize the relationship between Trump's 2016 support (`perrep_2016`) and the `StateColor` (categorical) we need to incorporate a grouping mechanism. Work through the several options below.

## Exercise: Side-by-Side Density Plots {.unnumbered .smaller}

We can show density plots for each state color next to each other:

a.  Construct a density plot for each group.

. . . 

```{r}
ggplot(elect, aes(x=perrep_2016, fill=StateColor)) + 
  geom_density()
```

b.  Notice that `ggplot` randomly assigns colors to group based on alphabetical order. In this example, the random color doesn't match the group itself (red/purple/blue)! We can fix this:

. . . 

```{r}
ggplot(elect, aes(x=perrep_2016, fill=StateColor)) + 
  geom_density() + 
  scale_fill_manual(values=c("blue","purple","red"))
```

c.  The overlap between the groups makes it difficult to explore the features of each. One option is to add *transparency* to the density plots:

. . . 

```{r }
ggplot(elect, aes(x=perrep_2016, fill=StateColor)) + 
  geom_density(alpha=0.5) + 
  scale_fill_manual(values=c("blue","purple","red"))
```

d.  Yet another option is to separate the density plots into separate "facets" defined by group:

. . . 

```{r}
ggplot(elect, aes(x=perrep_2016, fill=StateColor)) + 
  geom_density(alpha=0.5) + 
  scale_fill_manual(values=c("blue","purple","red")) + 
  facet_wrap( ~ StateColor)
```

## Exercise: Side-by-Side Histograms {.unnumbered .smaller}

Let's try a similar strategy using histograms to illustrate the relationship between `perrep_2016` and `StateColor`.

a.  Start with the default histogram:

. . .

```{r}
ggplot(elect, aes(x=perrep_2016, fill=StateColor)) + 
  geom_histogram(color="white") 
```

b.  That's not very helpful! Separate the histograms into separate facets for each `StateColor` group.

. . . 

```{r }
ggplot(elect, aes(x=perrep_2016, fill=StateColor)) + 
  geom_histogram(color="white") +
  facet_grid( ~ StateColor)
```

## Exercise: More Options! {.unnumbered .smaller}

Density plots and histograms aren't the only type of viz we might use...

a.  Construct side-by-side violins and side-by-side boxplots (see description below).

```{r}
#violins instead
ggplot(elect, aes(y=perrep_2016, x=StateColor)) + 
  geom_violin() 

#boxes instead
ggplot(elect, aes(y=perrep_2016, x=StateColor)) + 
  geom_boxplot() 
```

Box plots are constructed from five numbers - the minimum, 25th percentile, median, 75th percentile, and maximum value of a quantitative variable. 

b.  In the future, we'll typically use *density plots* instead of histograms, violins, and boxes. Explain at least one pro and one con of the density plot.

## Exercise: Reflection {.unnumbered}

Let's not forget the most important purpose of these visualizations! 

Summarize the relationship between Trump's 2016 county-level support among red/purple/blue states.



## Visualizing categorical vs categorical relationships {.unnumbered .smaller}

Finally, suppose that instead of Trump's percentage support, we simply want to explore his county-level wins/losses:

```{r}
#| echo: false
#| fig.width: 4 
#| fig.height: 4
ggplot(elect, aes(x=winrep_2016)) + geom_bar()
```

Specifically, let's explore the relationship between `winrep_2016` and `StateColor`, another categorical variable.

## Exercise: Side-by-side bar plots {.unnumbered .smaller}

We saw above that we can incorporate a new categorical variable into a visualization by using grouping features such as color or facets. Let's add information about `StateColor` to our bar plot of `winrep_2016`.

a.  Construct the following 4 bar plot visualizations.

. . .

```{r }
#a stacked bar plot
ggplot(elect, aes(x=StateColor, fill=winrep_2016)) + 
  geom_bar()

#a side-by-side bar plot
ggplot(elect, aes(x=StateColor, fill=winrep_2016)) + 
  geom_bar(position="dodge")

#a proportional bar plot
ggplot(elect, aes(x=StateColor, fill=winrep_2016)) + 
  geom_bar(position="fill")    

#faceted bar plot
ggplot(elect, aes(x=StateColor, fill=winrep_2016)) + 
  geom_bar() +
  facet_wrap( ~ winrep_2016)
```

b.  Name one pro and one con of using the "proportional bar plot" instead of one of the other three options.


c.  What's your favorite bar plot? Why?
