---
title: "Regular Expressions/Cleaning Text Data"
author: "James Normington"
logo: "images/mac.png"
format: 
  revealjs:
    theme: slides.scss
    multiplex: true
    transition: fade
    chalkboard: true
    auto-stretch: false
editor: visual
---

## Announcements {.unnumbered .smaller}

```{r setup}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(ggmap)
library(GGally)

```

## Regular Expressions

Regular expressions allow us to describe character patterns.

After class, try: [Interactive Regex Tutorial](https://regexone.com/)

## Text Examples

```{r}
(example <- "The quick brown fox jumps over the lazy dog.")
```

<br> <br>

We'll practice:

-   Replacing text patterns
-   Detecting text patterns
-   Locating text patterns
-   Changing case
-   Separate/split text

## Search and replace patterns {.unnumbered}

To search for a pattern and replace it, we can use the functions `str_replace` and `str_replace_all`.

<br>

```{r}
example
```

```{r}
str_replace(example, pattern = "quick", replacement = "really quick")
```

. . .

```{r}
str_replace_all(example, pattern = "(fox|dog)",  replacement = "****") 
```

. . .

```{r}
str_replace_all(example, "(fox|dog).", "****") # "." for any character
```

. . .

```{r}
str_replace_all(example, "(fox|dog)\\.$", "****") # at end of sentence only, "\\." only for a period
```

. . .

```{r}
str_replace(example, "[Tt]he", "a") # only first match
str_replace_all(example, "[Tt]he", "a") # all matches
```

## Detect patterns {.unnumbered}

```{r}
example2 <- "Two roads diverged in a yellow wood, / And sorry I could not travel both / And be one traveler, long I stood / And looked down one as far as I could"
example3 <- "This is a test"
(examples <- c(example, example2, example3))
```

. . .

```{r}
pat <- "[^aeiouAEIOU ]{3}" # Regular expression for three straight consonants. Note that I've excluded spaces as well
```

. . .

```{r}
str_detect(examples, pat) 

str_subset(examples, pat)
```

## Locate patterns {.unnumbered}

```{r}
example
str_locate(example, pat) # starting position and ending position of first match
```

Let's check the answer:

```{r}
str_sub(example, 23, 25)
```

## Extract patterns {.unnumbered}

```{r}
example2
pat2 <- "[^aeiouAEIOU ][aeiouAEIOU]{2}[^aeiouAEIOU ]{1}" # consonant followed by two vowels followed by a consonant

str_extract(example2, pat2) # extract first match
str_extract_all(example2, pat2, simplify = TRUE) # extract all matches
```

## Count the number of characters {.unnumbered}

```{r}
example2
str_length(example2)
```

## Change case {.unnumbered}

```{r}
example2
str_to_lower(example2)
```

## Split strings {.unnumbered}

```{r}
df <- tibble(ex = example2)
df <- df %>% separate(ex, c("line1", "line2", "line3", "line4"), sep = " / ")
df
```

## Practice {.unnumbered}

Go to our [course website](https://jamesnormington.github.io/112_fall_2022/) and download the Rmd template file.

## After Class {.unnumbered}

**Regular Expressions**

-   Try [Interactive Regex Tutorial](https://regexone.com/)
-   Continue working on Regex (HW 9, due Wednesday)

**Other Assignments**

-   Iterative Viz
-   Continue thinking about Final Project
